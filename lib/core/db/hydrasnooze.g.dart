// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'hydrasnooze.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:UserTable.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// UserTable TABLE
class TableUserTable extends SqfEntityTableBase {
  TableUserTable() {
    // declare properties of EntityTable
    tableName = 'UserTable';
    primaryKeyName = 'uid';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('dob', DbType.text),
      SqfEntityFieldBase('gender', DbType.text),
      SqfEntityFieldBase('weight', DbType.integer),
      SqfEntityFieldBase('wakeUpTime', DbType.text),
      SqfEntityFieldBase('photoUrl', DbType.text),
      SqfEntityFieldBase('waterGoal', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUserTable();
  }
}

// AlarmModel TABLE
class TableAlarmModel extends SqfEntityTableBase {
  TableAlarmModel() {
    // declare properties of EntityTable
    tableName = 'AlarmModel';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('label', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableUserTable.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'uid'),
      SqfEntityFieldBase('alarmTime', DbType.text),
      SqfEntityFieldBase('doRepeat', DbType.bool),
      SqfEntityFieldBase('isActive', DbType.bool),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAlarmModel();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class Hydrasnooze extends SqfEntityModelProvider {
  Hydrasnooze() {
    databaseName = hydrasnooze.databaseName;
    password = hydrasnooze.password;
    dbVersion = hydrasnooze.dbVersion;
    preSaveAction = hydrasnooze.preSaveAction;
    logFunction = hydrasnooze.logFunction;
    databaseTables = [
      TableUserTable.getInstance,
      TableAlarmModel.getInstance,
    ];

    bundledDatabasePath = hydrasnooze
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = hydrasnooze.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region UserTable
class UserTable extends TableBase {
  UserTable(
      {this.uid,
      this.name,
      this.email,
      this.dob,
      this.gender,
      this.weight,
      this.wakeUpTime,
      this.photoUrl,
      this.waterGoal,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  UserTable.withFields(
      this.uid,
      this.name,
      this.email,
      this.dob,
      this.gender,
      this.weight,
      this.wakeUpTime,
      this.photoUrl,
      this.waterGoal,
      this.isDeleted) {
    _setDefaultValues();
  }
  UserTable.withId(
      this.uid,
      this.name,
      this.email,
      this.dob,
      this.gender,
      this.weight,
      this.wakeUpTime,
      this.photoUrl,
      this.waterGoal,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  UserTable.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    uid = o['uid'].toString();
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['dob'] != null) {
      dob = o['dob'].toString();
    }
    if (o['gender'] != null) {
      gender = o['gender'].toString();
    }
    if (o['weight'] != null) {
      weight = int.tryParse(o['weight'].toString());
    }
    if (o['wakeUpTime'] != null) {
      wakeUpTime = o['wakeUpTime'].toString();
    }
    if (o['photoUrl'] != null) {
      photoUrl = o['photoUrl'].toString();
    }
    if (o['waterGoal'] != null) {
      waterGoal = int.tryParse(o['waterGoal'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (UserTable)
  String? uid;
  String? name;
  String? email;
  String? dob;
  String? gender;
  int? weight;
  String? wakeUpTime;
  String? photoUrl;
  int? waterGoal;
  bool? isDeleted;
  bool? isSaved;
  // end FIELDS (UserTable)

// COLLECTIONS & VIRTUALS (UserTable)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plAlarmModels', 'plField2'..]) or so on..
  List<AlarmModel>? plAlarmModels;

  /// get AlarmModel(s) filtered by uid=uid
  AlarmModelFilterBuilder? getAlarmModels(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (uid == null) {
      return null;
    }
    return AlarmModel()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .uid
        .equals(uid)
        .and;
  }

// END COLLECTIONS & VIRTUALS (UserTable)

  static const bool _softDeleteActivated = true;
  UserTableManager? __mnUserTable;

  UserTableManager get _mnUserTable {
    return __mnUserTable = __mnUserTable ?? UserTableManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['uid'] = uid;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (dob != null || !forView) {
      map['dob'] = dob;
    }
    if (gender != null || !forView) {
      map['gender'] = gender;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (wakeUpTime != null || !forView) {
      map['wakeUpTime'] = wakeUpTime;
    }
    if (photoUrl != null || !forView) {
      map['photoUrl'] = photoUrl;
    }
    if (waterGoal != null || !forView) {
      map['waterGoal'] = waterGoal;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['uid'] = uid;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (dob != null || !forView) {
      map['dob'] = dob;
    }
    if (gender != null || !forView) {
      map['gender'] = gender;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (wakeUpTime != null || !forView) {
      map['wakeUpTime'] = wakeUpTime;
    }
    if (photoUrl != null || !forView) {
      map['photoUrl'] = photoUrl;
    }
    if (waterGoal != null || !forView) {
      map['waterGoal'] = waterGoal;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (UserTable)
    if (!forQuery) {
      map['AlarmModels'] = await getAlarmModels()!.toMapList();
    }
// END COLLECTIONS (UserTable)

    return map;
  }

  /// This method returns Json String [UserTable]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [UserTable]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      uid,
      name,
      email,
      dob,
      gender,
      weight,
      wakeUpTime,
      photoUrl,
      waterGoal,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      uid,
      name,
      email,
      dob,
      gender,
      weight,
      wakeUpTime,
      photoUrl,
      waterGoal,
      isDeleted
    ];
  }

  static Future<List<UserTable>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR UserTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<UserTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <UserTable>[];
    try {
      objList = list
          .map((usertable) =>
              UserTable.fromMap(usertable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR UserTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<UserTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<UserTable> objList = <UserTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = UserTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('UserTable.plAlarmModels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAlarmModels'))) {
          /*_loadedfields!.add('UserTable.plAlarmModels'); */ obj
                  .plAlarmModels =
              obj.plAlarmModels ??
                  await obj.getAlarmModels()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns UserTable by ID if exist, otherwise returns null
  /// Primary Keys: String? uid
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [UserTable] if exist, otherwise returns null
  Future<UserTable?> getById(String? uid,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (uid == null) {
      return null;
    }
    UserTable? obj;
    final data = await _mnUserTable.getById([uid]);
    if (data.length != 0) {
      obj = UserTable.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('UserTable.plAlarmModels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAlarmModels'))) {
          /*_loadedfields!.add('UserTable.plAlarmModels'); */ obj
                  .plAlarmModels =
              obj.plAlarmModels ??
                  await obj.getAlarmModels()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (UserTable) object. If the Primary Key (uid) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same uid
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnUserTable.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO UserTable (uid, name, email, dob, gender, weight, wakeUpTime, photoUrl, waterGoal,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<UserTable> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<UserTable> usertables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Hydrasnooze().batchStart();
    for (final obj in usertables) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await Hydrasnooze().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUserTable.rawInsert(
          'INSERT OR REPLACE INTO UserTable (uid, name, email, dob, gender, weight, wakeUpTime, photoUrl, waterGoal,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            uid,
            name,
            email,
            dob,
            gender,
            weight,
            wakeUpTime,
            photoUrl,
            waterGoal,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'UserTable uid=$uid updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'UserTable uid=$uid did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'UserTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes UserTable

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete UserTable invoked (uid=$uid)');
    if (await AlarmModel().select().uid.equals(uid).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (AlarmModel.uid)');
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnUserTable
          .delete(QueryParams(whereString: 'uid=?', whereArguments: [uid]));
    } else {
      return _mnUserTable.updateBatch(
          QueryParams(whereString: 'uid=?', whereArguments: [uid]),
          {'isDeleted': 1});
    }
  }

  /// Recover UserTable

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover UserTable invoked (uid=$uid)');
    {
      return _mnUserTable.updateBatch(
          QueryParams(whereString: 'uid=?', whereArguments: [uid]),
          {'isDeleted': 0});
    }
  }

  @override
  UserTableFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UserTableFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      uid = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion usertable

// region UserTableField
class UserTableField extends FilterBase {
  UserTableField(UserTableFilterBuilder super.usertableFB);

  @override
  UserTableFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder isNull() {
    return super.isNull() as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UserTableFilterBuilder;
  }

  @override
  UserTableField get not {
    return super.not as UserTableField;
  }
}
// endregion UserTableField

// region UserTableFilterBuilder
class UserTableFilterBuilder extends ConjunctionBase {
  UserTableFilterBuilder(UserTable obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnUserTable = obj._mnUserTable;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UserTableManager? _mnUserTable;

  /// put the sql keyword 'AND'
  @override
  UserTableFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UserTableFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UserTableFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UserTableFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UserTableFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UserTableFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UserTableFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserTableFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserTableFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserTableFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserTableFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UserTableField _setField(
      UserTableField? field, String colName, DbType dbtype) {
    return UserTableField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UserTableField? _uid;
  UserTableField get uid {
    return _uid = _setField(_uid, 'uid', DbType.integer);
  }

  UserTableField? _name;
  UserTableField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  UserTableField? _email;
  UserTableField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  UserTableField? _dob;
  UserTableField get dob {
    return _dob = _setField(_dob, 'dob', DbType.text);
  }

  UserTableField? _gender;
  UserTableField get gender {
    return _gender = _setField(_gender, 'gender', DbType.text);
  }

  UserTableField? _weight;
  UserTableField get weight {
    return _weight = _setField(_weight, 'weight', DbType.integer);
  }

  UserTableField? _wakeUpTime;
  UserTableField get wakeUpTime {
    return _wakeUpTime = _setField(_wakeUpTime, 'wakeUpTime', DbType.text);
  }

  UserTableField? _photoUrl;
  UserTableField get photoUrl {
    return _photoUrl = _setField(_photoUrl, 'photoUrl', DbType.text);
  }

  UserTableField? _waterGoal;
  UserTableField get waterGoal {
    return _waterGoal = _setField(_waterGoal, 'waterGoal', DbType.integer);
  }

  UserTableField? _isDeleted;
  UserTableField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<UserTable> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (AlarmModel) according to DeleteRule.NO_ACTION

    final idListAlarmModelBYuid = toListPrimaryKeySQL(false);
    final resAlarmModelBYuid = await AlarmModel()
        .select()
        .where('uid IN (${idListAlarmModelBYuid['sql']})',
            parameterValue: idListAlarmModelBYuid['args'])
        .toCount();
    if (resAlarmModelBYuid > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (AlarmModel.uid)');
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUserTable!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUserTable!.delete(qparams);
    }
    return r;
  }

  /// Recover List<UserTable> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover UserTable bulk invoked');
    return _mnUserTable!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'uid IN (SELECT uid from UserTable ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUserTable!.updateBatch(qparams, values);
  }

  /// This method always returns [UserTable] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> UserTable?
  @override
  Future<UserTable?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUserTable!.toList(qparams);
    final data = await objFuture;
    UserTable? obj;
    if (data.isNotEmpty) {
      obj = UserTable.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('UserTable.plAlarmModels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAlarmModels'))) {
          /*_loadedfields!.add('UserTable.plAlarmModels'); */ obj
                  .plAlarmModels =
              obj.plAlarmModels ??
                  await obj.getAlarmModels()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [UserTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> UserTable?
  @override
  Future<UserTable> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        UserTable();
  }

  /// This method returns int. [UserTable]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? usertableCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usertablesFuture = await _mnUserTable!.toList(qparams);
    final int count = usertablesFuture[0]['CNT'] as int;
    if (usertableCount != null) {
      usertableCount(count);
    }
    return count;
  }

  /// This method returns List<UserTable> [UserTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<UserTable>
  @override
  Future<List<UserTable>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<UserTable> usertablesData = await UserTable.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usertablesData;
  }

  /// This method returns Json String [UserTable]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [UserTable]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [UserTable]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUserTable!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [UserTable]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    retVal['sql'] = 'SELECT `uid` FROM UserTable WHERE ${qparams.whereString}';
    retVal['args'] = qparams.whereArguments;
    return retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> uidData = <String>[];
    qparams.selectColumns = ['uid'];
    final uidFuture = await _mnUserTable!.toList(qparams);

    final int count = uidFuture.length;
    for (int i = 0; i < count; i++) {
      uidData.add(uidFuture[i]['uid'] as String);
    }
    return uidData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [UserTable]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUserTable!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await UserTable.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUserTable!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserTableFilterBuilder

// region UserTableFields
class UserTableFields {
  static TableField? _fUid;
  static TableField get uid {
    return _fUid = _fUid ?? SqlSyntax.setField(_fUid, 'uid', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fDob;
  static TableField get dob {
    return _fDob = _fDob ?? SqlSyntax.setField(_fDob, 'dob', DbType.text);
  }

  static TableField? _fGender;
  static TableField get gender {
    return _fGender =
        _fGender ?? SqlSyntax.setField(_fGender, 'gender', DbType.text);
  }

  static TableField? _fWeight;
  static TableField get weight {
    return _fWeight =
        _fWeight ?? SqlSyntax.setField(_fWeight, 'weight', DbType.integer);
  }

  static TableField? _fWakeUpTime;
  static TableField get wakeUpTime {
    return _fWakeUpTime = _fWakeUpTime ??
        SqlSyntax.setField(_fWakeUpTime, 'wakeUpTime', DbType.text);
  }

  static TableField? _fPhotoUrl;
  static TableField get photoUrl {
    return _fPhotoUrl =
        _fPhotoUrl ?? SqlSyntax.setField(_fPhotoUrl, 'photoUrl', DbType.text);
  }

  static TableField? _fWaterGoal;
  static TableField get waterGoal {
    return _fWaterGoal = _fWaterGoal ??
        SqlSyntax.setField(_fWaterGoal, 'waterGoal', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UserTableFields

//region UserTableManager
class UserTableManager extends SqfEntityProvider {
  UserTableManager()
      : super(Hydrasnooze(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'UserTable';
  static const List<String> _primaryKeyList = ['uid'];
  static const String _whereStr = 'uid=?';
}

//endregion UserTableManager
// region AlarmModel
class AlarmModel extends TableBase {
  AlarmModel(
      {this.id,
      this.label,
      this.uid,
      this.alarmTime,
      this.doRepeat,
      this.isActive,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  AlarmModel.withFields(this.label, this.uid, this.alarmTime, this.doRepeat,
      this.isActive, this.isDeleted) {
    _setDefaultValues();
  }
  AlarmModel.withId(this.id, this.label, this.uid, this.alarmTime,
      this.doRepeat, this.isActive, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  AlarmModel.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['label'] != null) {
      label = o['label'].toString();
    }
    uid = o['uid'].toString();

    if (o['alarmTime'] != null) {
      alarmTime = o['alarmTime'].toString();
    }
    if (o['doRepeat'] != null) {
      doRepeat =
          o['doRepeat'].toString() == '1' || o['doRepeat'].toString() == 'true';
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plUserTable = o['userTable'] != null
        ? UserTable.fromMap(o['userTable'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (AlarmModel)
  int? id;
  String? label;
  String? uid;
  String? alarmTime;
  bool? doRepeat;
  bool? isActive;
  bool? isDeleted;

  // end FIELDS (AlarmModel)

// RELATIONSHIPS (AlarmModel)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUserTable', 'plField2'..]) or so on..
  UserTable? plUserTable;

  /// get UserTable By Uid
  Future<UserTable?> getUserTable(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final obj = await UserTable()
        .getById(uid, loadParents: loadParents, loadedFields: loadedFields);
    return obj;
  }
  // END RELATIONSHIPS (AlarmModel)

  static const bool _softDeleteActivated = true;
  AlarmModelManager? __mnAlarmModel;

  AlarmModelManager get _mnAlarmModel {
    return __mnAlarmModel = __mnAlarmModel ?? AlarmModelManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (uid != null) {
      map['uid'] = forView
          ? plUserTable == null
              ? uid
              : plUserTable!.name
          : uid;
    } else if (uid != null || !forView) {
      map['uid'] = null;
    }
    if (alarmTime != null || !forView) {
      map['alarmTime'] = alarmTime;
    }
    if (doRepeat != null) {
      map['doRepeat'] = forQuery ? (doRepeat! ? 1 : 0) : doRepeat;
    } else if (doRepeat != null || !forView) {
      map['doRepeat'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (uid != null) {
      map['uid'] = forView
          ? plUserTable == null
              ? uid
              : plUserTable!.name
          : uid;
    } else if (uid != null || !forView) {
      map['uid'] = null;
    }
    if (alarmTime != null || !forView) {
      map['alarmTime'] = alarmTime;
    }
    if (doRepeat != null) {
      map['doRepeat'] = forQuery ? (doRepeat! ? 1 : 0) : doRepeat;
    } else if (doRepeat != null || !forView) {
      map['doRepeat'] = null;
    }
    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    } else if (isActive != null || !forView) {
      map['isActive'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [AlarmModel]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [AlarmModel]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [label, uid, alarmTime, doRepeat, isActive, isDeleted];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, label, uid, alarmTime, doRepeat, isActive, isDeleted];
  }

  static Future<List<AlarmModel>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR AlarmModel.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<AlarmModel>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <AlarmModel>[];
    try {
      objList = list
          .map((alarmmodel) =>
              AlarmModel.fromMap(alarmmodel as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR AlarmModel.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<AlarmModel>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<AlarmModel> objList = <AlarmModel>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = AlarmModel.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUserTable'))) {
          obj.plUserTable = obj.plUserTable ??
              await obj.getUserTable(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns AlarmModel by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [AlarmModel] if exist, otherwise returns null
  Future<AlarmModel?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    AlarmModel? obj;
    final data = await _mnAlarmModel.getById([id]);
    if (data.length != 0) {
      obj = AlarmModel.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUserTable'))) {
          obj.plUserTable = obj.plUserTable ??
              await obj.getUserTable(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (AlarmModel) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAlarmModel.insert(this, ignoreBatch);
    } else {
      await _mnAlarmModel.update(this);
    }

    return id;
  }

  /// Saves the (AlarmModel) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAlarmModel.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAlarmModel.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs AlarmModel. Returns a new Primary Key value of AlarmModel

  /// <returns>Returns a new Primary Key value of AlarmModel
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<AlarmModel> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<AlarmModel> alarmmodels,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Hydrasnooze().batchStart();
    for (final obj in alarmmodels) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Hydrasnooze().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < alarmmodels.length; i++) {
        if (alarmmodels[i].id == null) {
          alarmmodels[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAlarmModel.rawInsert(
          'INSERT OR REPLACE INTO AlarmModel (id, label, uid, alarmTime, doRepeat, isActive,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [id, label, uid, alarmTime, doRepeat, isActive, isDeleted],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'AlarmModel id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'AlarmModel id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'AlarmModel Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<AlarmModel>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<AlarmModel> alarmmodels,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnAlarmModel.rawInsertAll(
        'INSERT OR REPLACE INTO AlarmModel (id, label, uid, alarmTime, doRepeat, isActive,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        alarmmodels,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes AlarmModel

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete AlarmModel invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnAlarmModel
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAlarmModel.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover AlarmModel

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover AlarmModel invoked (id=$id)');
    {
      return _mnAlarmModel.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  AlarmModelFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AlarmModelFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AlarmModelFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AlarmModelFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion alarmmodel

// region AlarmModelField
class AlarmModelField extends FilterBase {
  AlarmModelField(AlarmModelFilterBuilder super.alarmmodelFB);

  @override
  AlarmModelFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder isNull() {
    return super.isNull() as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AlarmModelFilterBuilder;
  }

  @override
  AlarmModelField get not {
    return super.not as AlarmModelField;
  }
}
// endregion AlarmModelField

// region AlarmModelFilterBuilder
class AlarmModelFilterBuilder extends ConjunctionBase {
  AlarmModelFilterBuilder(AlarmModel obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAlarmModel = obj._mnAlarmModel;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AlarmModelManager? _mnAlarmModel;

  /// put the sql keyword 'AND'
  @override
  AlarmModelFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AlarmModelFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AlarmModelFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AlarmModelFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AlarmModelFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AlarmModelFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AlarmModelFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AlarmModelFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AlarmModelFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AlarmModelFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AlarmModelFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AlarmModelField _setField(
      AlarmModelField? field, String colName, DbType dbtype) {
    return AlarmModelField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AlarmModelField? _id;
  AlarmModelField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AlarmModelField? _label;
  AlarmModelField get label {
    return _label = _setField(_label, 'label', DbType.text);
  }

  AlarmModelField? _uid;
  AlarmModelField get uid {
    return _uid = _setField(_uid, 'uid', DbType.text);
  }

  AlarmModelField? _alarmTime;
  AlarmModelField get alarmTime {
    return _alarmTime = _setField(_alarmTime, 'alarmTime', DbType.text);
  }

  AlarmModelField? _doRepeat;
  AlarmModelField get doRepeat {
    return _doRepeat = _setField(_doRepeat, 'doRepeat', DbType.bool);
  }

  AlarmModelField? _isActive;
  AlarmModelField get isActive {
    return _isActive = _setField(_isActive, 'isActive', DbType.bool);
  }

  AlarmModelField? _isDeleted;
  AlarmModelField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<AlarmModel> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAlarmModel!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAlarmModel!.delete(qparams);
    }
    return r;
  }

  /// Recover List<AlarmModel> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover AlarmModel bulk invoked');
    return _mnAlarmModel!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from AlarmModel ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAlarmModel!.updateBatch(qparams, values);
  }

  /// This method always returns [AlarmModel] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> AlarmModel?
  @override
  Future<AlarmModel?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAlarmModel!.toList(qparams);
    final data = await objFuture;
    AlarmModel? obj;
    if (data.isNotEmpty) {
      obj = AlarmModel.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plUserTable'))) {
          obj.plUserTable = obj.plUserTable ??
              await obj.getUserTable(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [AlarmModel]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> AlarmModel?
  @override
  Future<AlarmModel> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        AlarmModel();
  }

  /// This method returns int. [AlarmModel]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? alarmmodelCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final alarmmodelsFuture = await _mnAlarmModel!.toList(qparams);
    final int count = alarmmodelsFuture[0]['CNT'] as int;
    if (alarmmodelCount != null) {
      alarmmodelCount(count);
    }
    return count;
  }

  /// This method returns List<AlarmModel> [AlarmModel]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<AlarmModel>
  @override
  Future<List<AlarmModel>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<AlarmModel> alarmmodelsData = await AlarmModel.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return alarmmodelsData;
  }

  /// This method returns Json String [AlarmModel]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [AlarmModel]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [AlarmModel]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAlarmModel!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [AlarmModel]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    retVal['sql'] = 'SELECT `id` FROM AlarmModel WHERE ${qparams.whereString}';
    retVal['args'] = qparams.whereArguments;
    return retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAlarmModel!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [AlarmModel]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAlarmModel!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await AlarmModel.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAlarmModel!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AlarmModelFilterBuilder

// region AlarmModelFields
class AlarmModelFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel =
        _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }

  static TableField? _fUid;
  static TableField get uid {
    return _fUid = _fUid ?? SqlSyntax.setField(_fUid, 'uid', DbType.text);
  }

  static TableField? _fAlarmTime;
  static TableField get alarmTime {
    return _fAlarmTime = _fAlarmTime ??
        SqlSyntax.setField(_fAlarmTime, 'alarmTime', DbType.text);
  }

  static TableField? _fDoRepeat;
  static TableField get doRepeat {
    return _fDoRepeat =
        _fDoRepeat ?? SqlSyntax.setField(_fDoRepeat, 'doRepeat', DbType.bool);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion AlarmModelFields

//region AlarmModelManager
class AlarmModelManager extends SqfEntityProvider {
  AlarmModelManager()
      : super(Hydrasnooze(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'AlarmModel';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AlarmModelManager
class HydrasnoozeSequenceManager extends SqfEntityProvider {
  HydrasnoozeSequenceManager() : super(Hydrasnooze());
}
// END OF ENTITIES
